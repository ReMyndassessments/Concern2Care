import PDFDocument from "pdfkit";
import fs from "fs";
import path from "path";
import { ConcernWithDetails, Intervention } from "@shared/schema";

export async function generateConcernReport(
  concern: ConcernWithDetails,
  interventions: Intervention[],
  outputPath: string
): Promise<void> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50 });
      const stream = fs.createWriteStream(outputPath);
      doc.pipe(stream);

      // Header
      doc.fontSize(20).fillColor('#2563eb').text('Concern2Care', 50, 50);
      doc.fontSize(16).fillColor('#000000').text('Student Concern Report', 50, 80);
      
      // Date
      const currentDate = new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      doc.fontSize(10).fillColor('#666666').text(`Generated on ${currentDate}`, 50, 110);

      // Line separator
      doc.moveTo(50, 130).lineTo(545, 130).stroke('#e2e8f0');

      let yPosition = 150;

      // Student Information
      doc.fontSize(14).fillColor('#000000').text('Student Information', 50, yPosition);
      yPosition += 25;
      doc.fontSize(12).text(`Name: ${concern.studentFirstName} ${concern.studentLastInitial}.`, 50, yPosition);
      yPosition += 20;
      doc.text(`Teacher: ${concern.teacher.firstName} ${concern.teacher.lastName}`, 50, yPosition);
      yPosition += 20;
      doc.text(`School: ${concern.teacher.school || 'Not specified'}`, 50, yPosition);
      yPosition += 30;

      // Concern Details
      doc.fontSize(14).fillColor('#000000').text('Concern Details', 50, yPosition);
      yPosition += 25;
      const concernTypes = Array.isArray(concern.concernTypes) ? concern.concernTypes : [];
      const concernTypeText = concernTypes.length > 0 ? concernTypes.join(', ') : 'Not specified';
      doc.fontSize(12).text(`Type: ${concernTypeText}`, 50, yPosition);
      yPosition += 20;
      doc.text(`Date Documented: ${concern.createdAt?.toLocaleDateString('en-US') || 'Unknown'}`, 50, yPosition);
      yPosition += 25;
      
      doc.text('Description:', 50, yPosition);
      yPosition += 15;
      const descriptionLines = doc.heightOfString(concern.description, { width: 495 });
      doc.text(concern.description, 50, yPosition, { width: 495, align: 'justify' });
      yPosition += descriptionLines + 30;

      // Check if we need a new page
      if (yPosition > 700) {
        doc.addPage();
        yPosition = 50;
      }

      // AI-Generated Interventions
      doc.fontSize(14).fillColor('#000000').text('AI-Generated Intervention Strategies', 50, yPosition);
      yPosition += 25;

      interventions.forEach((intervention, index) => {
        // Check if we need a new page for this intervention
        if (yPosition > 650) {
          doc.addPage();
          yPosition = 50;
        }

        doc.fontSize(12).fillColor('#2563eb').text(`${index + 1}. ${intervention.title}`, 50, yPosition);
        yPosition += 20;
        
        const descHeight = doc.heightOfString(intervention.description, { width: 495 });
        doc.fontSize(10).fillColor('#000000').text(intervention.description, 50, yPosition, { width: 495, align: 'justify' });
        yPosition += descHeight + 15;

        if (intervention.steps && Array.isArray(intervention.steps)) {
          doc.fontSize(10).fillColor('#666666').text('Implementation Steps:', 50, yPosition);
          yPosition += 15;
          
          intervention.steps.forEach((step, stepIndex) => {
            doc.text(`â€¢ ${step}`, 70, yPosition, { width: 475 });
            yPosition += 15;
          });
        }

        if (intervention.timeline) {
          doc.fontSize(10).fillColor('#666666').text(`Timeline: ${intervention.timeline}`, 50, yPosition);
          yPosition += 20;
        }

        // Add some space between interventions
        yPosition += 15;
      });

      // Follow-up questions if any
      if (concern.followUpQuestions && concern.followUpQuestions.length > 0) {
        if (yPosition > 600) {
          doc.addPage();
          yPosition = 50;
        }

        doc.fontSize(14).fillColor('#000000').text('Follow-up Questions & Responses', 50, yPosition);
        yPosition += 25;

        concern.followUpQuestions.forEach((qa, index) => {
          if (yPosition > 650) {
            doc.addPage();
            yPosition = 50;
          }

          doc.fontSize(11).fillColor('#2563eb').text(`Q${index + 1}: ${qa.question}`, 50, yPosition);
          yPosition += 20;
          
          const responseHeight = doc.heightOfString(qa.response, { width: 495 });
          doc.fontSize(10).fillColor('#000000').text(`A: ${qa.response}`, 50, yPosition, { width: 495, align: 'justify' });
          yPosition += responseHeight + 20;
        });
      }

      // Footer
      doc.fontSize(8).fillColor('#666666').text(
        'This report was generated by Concern2Care. All intervention strategies are evidence-based and appropriate for Tier 2 implementation.',
        50,
        doc.page.height - 80,
        { width: 495, align: 'center' }
      );

      doc.end();
      
      stream.on('finish', () => {
        resolve();
      });
      
      stream.on('error', (error) => {
        reject(error);
      });
    } catch (error) {
      reject(error);
    }
  });
}

export function ensureReportsDirectory(): string {
  const reportsDir = path.join(process.cwd(), 'reports');
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }
  return reportsDir;
}
