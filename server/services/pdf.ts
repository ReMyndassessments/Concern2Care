import PDFDocument from "pdfkit";
import fs from "fs";
import path from "path";
import { ConcernWithDetails, Intervention } from "@shared/schema";

export async function generateConcernReport(
  concern: ConcernWithDetails,
  interventions: Intervention[],
  outputPath: string
): Promise<void> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50 });
      const stream = fs.createWriteStream(outputPath);
      doc.pipe(stream);

      // Header
      doc.fontSize(20).fillColor('#2563eb').text('Concern2Care', 50, 50);
      doc.fontSize(16).fillColor('#000000').text('Student Concern Report', 50, 80);
      
      // Date
      const currentDate = new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      doc.fontSize(10).fillColor('#666666').text(`Generated on ${currentDate}`, 50, 110);

      // Line separator
      doc.moveTo(50, 130).lineTo(545, 130).stroke('#e2e8f0');

      let yPosition = 150;

      // Student Information
      doc.fontSize(14).fillColor('#000000').text('Student Information', 50, yPosition);
      yPosition += 25;
      doc.fontSize(12).text(`Name: ${concern.studentFirstName} ${concern.studentLastInitial}.`, 50, yPosition);
      yPosition += 20;
      doc.text(`Teacher: ${concern.teacher.firstName} ${concern.teacher.lastName}`, 50, yPosition);
      yPosition += 20;
      doc.text(`School: ${concern.teacher.school || 'Not specified'}`, 50, yPosition);
      yPosition += 30;

      // Concern Details
      doc.fontSize(14).fillColor('#000000').text('Concern Details', 50, yPosition);
      yPosition += 25;
      const concernTypes = Array.isArray(concern.concernTypes) ? concern.concernTypes : [];
      const concernTypeText = concernTypes.length > 0 ? concernTypes.join(', ') : 'Not specified';
      doc.fontSize(12).text(`Type: ${concernTypeText}`, 50, yPosition);
      yPosition += 20;
      doc.text(`Date Documented: ${concern.createdAt?.toLocaleDateString('en-US') || 'Unknown'}`, 50, yPosition);
      yPosition += 25;
      
      doc.text('Description:', 50, yPosition);
      yPosition += 15;
      const descriptionLines = doc.heightOfString(concern.description, { width: 495 });
      doc.text(concern.description, 50, yPosition, { width: 495, align: 'justify' });
      yPosition += descriptionLines + 30;

      // Check if we need a new page
      if (yPosition > 700) {
        doc.addPage();
        yPosition = 50;
      }

      // AI-Generated Interventions
      doc.fontSize(14).fillColor('#000000').text('AI-Generated Intervention Strategies', 50, yPosition);
      yPosition += 25;

      interventions.forEach((intervention, index) => {
        // Check if we need a new page for this intervention
        if (yPosition > 650) {
          doc.addPage();
          yPosition = 50;
        }

        doc.fontSize(12).fillColor('#2563eb').text(`${index + 1}. ${intervention.title}`, 50, yPosition);
        yPosition += 20;
        
        // Parse and format the description markdown
        yPosition = parseMarkdownToPDF(doc, intervention.description, yPosition);
        yPosition += 15;

        if (intervention.steps && Array.isArray(intervention.steps)) {
          doc.fontSize(10).fillColor('#666666').text('Implementation Steps:', 50, yPosition);
          yPosition += 15;
          
          intervention.steps.forEach((step, stepIndex) => {
            doc.text(`â€¢ ${step}`, 70, yPosition, { width: 475 });
            yPosition += 15;
          });
        }

        if (intervention.timeline) {
          doc.fontSize(10).fillColor('#666666').text(`Timeline: ${intervention.timeline}`, 50, yPosition);
          yPosition += 20;
        }

        // Add some space between interventions
        yPosition += 15;
      });

      // Follow-up questions if any
      if (concern.followUpQuestions && concern.followUpQuestions.length > 0) {
        if (yPosition > 600) {
          doc.addPage();
          yPosition = 50;
        }

        doc.fontSize(14).fillColor('#000000').text('Follow-up Questions & Responses', 50, yPosition);
        yPosition += 25;

        concern.followUpQuestions.forEach((qa, index) => {
          if (yPosition > 650) {
            doc.addPage();
            yPosition = 50;
          }

          doc.fontSize(11).fillColor('#2563eb').text(`Q${index + 1}: ${qa.question}`, 50, yPosition);
          yPosition += 20;
          
          doc.fontSize(10).fillColor('#000000').text('A: ', 50, yPosition);
          yPosition += 15;
          
          // Apply markdown parsing to the response
          yPosition = parseMarkdownToPDF(doc, qa.response, yPosition);
          yPosition += 15;
        });
      }

      // Footer
      doc.fontSize(8).fillColor('#666666').text(
        'This report was generated by Concern2Care. All intervention strategies are evidence-based and appropriate for Tier 2 implementation.',
        50,
        doc.page.height - 80,
        { width: 495, align: 'center' }
      );

      doc.end();
      
      stream.on('finish', () => {
        resolve();
      });
      
      stream.on('error', (error) => {
        reject(error);
      });
    } catch (error) {
      reject(error);
    }
  });
}

// Helper function to parse markdown and format it in PDF with beautiful styling
function parseMarkdownToPDF(doc: any, text: string, startY: number): number {
  const lines = text.split('\n');
  let yPosition = startY;
  let inBulletList = false;
  
  for (let i = 0; i < lines.length; i++) {
    const trimmedLine = lines[i].trim();
    if (!trimmedLine) {
      // Add spacing for empty lines
      if (!inBulletList) {
        yPosition += 5;
      }
      continue;
    }
    
    // Check if we need a new page
    if (yPosition > 700) {
      doc.addPage();
      yPosition = 50;
    }
    
    // Main headings (### **1. Assessment Summary** OR ### **Direct Answer: Title**)
    if (trimmedLine.match(/^###\s*\*\*(.*?)\*\*/)) {
      const title = trimmedLine.replace(/^###\s*\*\*(.*?)\*\*/, '$1');
      // Add extra spacing before main headings
      if (yPosition > startY + 20) yPosition += 15;
      
      // Draw a subtle line above the heading
      doc.moveTo(50, yPosition - 5).lineTo(545, yPosition - 5).stroke('#e2e8f0');
      
      doc.fontSize(12).fillColor('#2563eb').text(title, 50, yPosition);
      yPosition += 25;
      inBulletList = false;
      continue;
    }
    
    // Strategy headings (* **Strategy: Name**)
    if (trimmedLine.match(/^\*\s*\*\*Strategy:\s*(.*?)\*\*/)) {
      const title = trimmedLine.replace(/^\*\s*\*\*Strategy:\s*(.*?)\*\*/, '$1');
      yPosition += 8;
      doc.fontSize(10).fillColor('#1e40af').text(`> Strategy: ${title}`, 60, yPosition);
      yPosition += 18;
      inBulletList = false;
      continue;
    }
    
    // Implementation headings (* **Implementation:**)
    if (trimmedLine.match(/^\*\s*\*\*Implementation:\*\*/)) {
      yPosition += 5;
      doc.fontSize(9).fillColor('#059669').text('Implementation:', 70, yPosition);
      yPosition += 15;
      inBulletList = true;
      continue;
    }
    
    // Data Collection, Expected Outcome, etc.
    if (trimmedLine.match(/^\*\s*\*\*(.*?):\*\*/)) {
      const title = trimmedLine.replace(/^\*\s*\*\*(.*?):\*\*/, '$1');
      yPosition += 5;
      doc.fontSize(9).fillColor('#7c3aed').text(`${title}:`, 60, yPosition);
      yPosition += 15;
      inBulletList = true;
      continue;
    }
    
    // Numbered section headings (1. **Initial Contact and Relationship Building**)
    if (trimmedLine.match(/^\d+\.\s*\*\*(.*?)\*\*/)) {
      const title = trimmedLine.replace(/^\d+\.\s*\*\*(.*?)\*\*/, '$1');
      const number = trimmedLine.match(/^(\d+)\./)?.[1] || '';
      yPosition += 8;
      doc.fontSize(10).fillColor('#1e40af').text(`${number}. ${title}`, 60, yPosition);
      yPosition += 18;
      inBulletList = false;
      continue;
    }

    // Sub-headings without colons (* **Expected Outcome**)
    if (trimmedLine.match(/^\*\s*\*\*(.*?)\*\*/) && !trimmedLine.includes(':')) {
      const title = trimmedLine.replace(/^\*\s*\*\*(.*?)\*\*/, '$1');
      yPosition += 5;
      doc.fontSize(9).fillColor('#dc2626').text(`${title}`, 60, yPosition);
      yPosition += 15;
      inBulletList = false;
      continue;
    }

    // Bold standalone headings (**Title**) 
    if (trimmedLine.match(/^\*\*(.*?)\*\*\s*$/) && !trimmedLine.includes(':')) {
      const title = trimmedLine.replace(/^\*\*(.*?)\*\*\s*$/, '$1');
      yPosition += 5;
      doc.fontSize(9).fillColor('#374151').text(title, 60, yPosition);
      yPosition += 15;
      inBulletList = false;
      continue;
    }
    
    // Nested bullet points (  * text)
    if (trimmedLine.match(/^\s{2,}\*\s/)) {
      const content = trimmedLine.replace(/^\s*\*\s*/, '');
      doc.fontSize(8).fillColor('#6b7280').text(`    - ${content}`, 85, yPosition, { width: 460 });
      const lineHeight = doc.heightOfString(`    - ${content}`, { width: 460 });
      yPosition += Math.max(lineHeight, 12) + 2;
      inBulletList = true;
      continue;
    }
    
    // Bullet points with dash (- text)
    if (trimmedLine.startsWith('- ')) {
      const content = trimmedLine.replace(/^-\s*/, '');
      // Handle bold text within content
      const cleanContent = content.replace(/\*\*(.*?)\*\*/g, '$1');
      doc.fontSize(9).fillColor('#374151').text(`  - ${cleanContent}`, 70, yPosition, { width: 475 });
      const lineHeight = doc.heightOfString(`  - ${cleanContent}`, { width: 475 });
      yPosition += Math.max(lineHeight, 14) + 3;
      inBulletList = true;
      continue;
    }

    // Regular bullet points (* text)
    if (trimmedLine.startsWith('* ')) {
      const content = trimmedLine.replace(/^\*\s*/, '');
      // Handle bold text within content
      const cleanContent = content.replace(/\*\*(.*?)\*\*/g, '$1');
      doc.fontSize(9).fillColor('#374151').text(`  - ${cleanContent}`, 70, yPosition, { width: 475 });
      const lineHeight = doc.heightOfString(`  - ${cleanContent}`, { width: 475 });
      yPosition += Math.max(lineHeight, 14) + 3;
      inBulletList = true;
      continue;
    }
    
    // Timeline, Resources information
    if (trimmedLine.match(/^\*\*Timeline:\*\*|^\*\*Resources.*:\*\*/)) {
      const content = trimmedLine.replace(/\*\*/g, '');
      yPosition += 3;
      doc.fontSize(8).fillColor('#059669').text(`${content}`, 80, yPosition, { width: 465 });
      const lineHeight = doc.heightOfString(`${content}`, { width: 465 });
      yPosition += lineHeight + 8;
      continue;
    }
    
    // Separators (---)
    if (trimmedLine === '---') {
      yPosition += 10;
      doc.moveTo(50, yPosition).lineTo(545, yPosition).stroke('#d1d5db');
      yPosition += 15;
      inBulletList = false;
      continue;
    }
    
    // Regular paragraphs
    if (trimmedLine.length > 0) {
      const indent = inBulletList ? 80 : 60;
      const width = inBulletList ? 465 : 485;
      // Clean bold text from regular paragraphs
      const cleanText = trimmedLine.replace(/\*\*(.*?)\*\*/g, '$1');
      doc.fontSize(9).fillColor('#374151').text(cleanText, indent, yPosition, { width: width, align: 'justify' });
      const lineHeight = doc.heightOfString(cleanText, { width: width });
      yPosition += lineHeight + 6;
    }
  }
  
  return yPosition + 10;
}

export function ensureReportsDirectory(): string {
  const reportsDir = path.join(process.cwd(), 'reports');
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }
  return reportsDir;
}
